{"version":3,"sources":["js/02-timer.js"],"names":["refs","input","document","querySelector","startBtn","stopBtn","spanDay","spanHour","spanMin","spanSec","timerId","massages","onTimerStart","setInterval","userTime","Date","value","currentTime","timeDifference","getTime","console","log","isNaN","clearInterval","alert","setAttribute","convertMs","onTimerStop","removeAttribute","ms","appdateTimer","Math","floor","hour","addLeadingZero","minute","second","String","padStart","days","hours","minutes","seconds","textContent","addEventListener"],"mappings":";AAEA,MAAMA,EAAO,CACTC,MAAOC,SAASC,cAAc,kBAC9BC,SAAUF,SAASC,cAAc,sBACjCE,QAASH,SAASC,cAAc,qBAChCG,QAASJ,SAASC,cAAc,mBAChCI,SAAUL,SAASC,cAAc,oBACjCK,QAASN,SAASC,cAAc,sBAChCM,QAASP,SAASC,cAAc,uBAGpC,IAAIO,EAAU,KACd,MAAMC,EAAW,qCAMjB,SAASC,IAGLF,EAAUG,YAAY,KACZC,MAAAA,EAAW,IAAIC,KAAKf,EAAKC,MAAMe,OAC/BC,EAAc,IAAIF,KAClBG,EAAiBJ,EAASK,UAAYF,EAAYE,UAKpDD,GAJJE,QAAQC,IAAIP,GACZM,QAAQC,IAAIJ,GACZG,QAAQC,IAAIH,GAERA,EAAiB,KAAQI,MAAMJ,GAK/B,OAJAK,cAAcb,QAEdc,MAAMb,GAKVX,EAAKI,SAASqB,aAAa,YAAY,GAEvCC,EAAUR,IAEX,KAGP,SAASS,IACLJ,cAAcb,GACdV,EAAKI,SAASwB,gBAAgB,YAIlC,SAASF,EAAUG,GAgBjBC,EARaC,KAAKC,MAAMH,EAHZI,OAKEC,EAAeH,KAAKC,MAAOH,EAL7BI,MADCE,OAQGD,EAAeH,KAAKC,MAAQH,EAPhCI,MADCE,KADEC,MAWCF,EAAeH,KAAKC,MAASH,EATjCI,MADCE,KADEC,IADA,OAmBjB,SAASF,EAAelB,GACbqB,OAAAA,OAAOrB,GAAOsB,SAAS,EAAG,KAGrC,SAASR,EAAaS,EAAMC,EAAOC,EAASC,GACxC1C,EAAKM,QAAQqC,YAAcJ,EAC3BvC,EAAKO,SAASoC,YAAcH,EAC5BxC,EAAKQ,QAAQmC,YAAcF,EAC3BzC,EAAKS,QAAQkC,YAAcD,EAjE/B1C,EAAKI,SAASwC,iBAAiB,QAAShC,GACxCZ,EAAKK,QAAQuC,iBAAiB,QAASjB","file":"02-timer.a82cfbb3.js","sourceRoot":"../src","sourcesContent":["\n\nconst refs = {\n    input: document.querySelector('#date-selector'),\n    startBtn: document.querySelector('button[data-start]'),\n    stopBtn: document.querySelector(\"button[data-stop]\"),\n    spanDay: document.querySelector('span[data-days]'),\n    spanHour: document.querySelector('span[data-hours]'),\n    spanMin: document.querySelector('span[data-minutes]'),\n    spanSec: document.querySelector('span[data-seconds]')\n}\n  \nlet timerId = null;\nconst massages = \"Please choose a date in the future\"\n\nrefs.startBtn.addEventListener('click', onTimerStart);\nrefs.stopBtn.addEventListener('click', onTimerStop);\n\n\nfunction onTimerStart() {\n    \n    \n    timerId = setInterval(() => {\n        const userTime = new Date(refs.input.value);\n        const currentTime = new Date();\n        const timeDifference = userTime.getTime() - currentTime.getTime();\n        console.log(userTime)\n        console.log(currentTime)\n        console.log(timeDifference)\n        \n        if (timeDifference < 1000 || isNaN(timeDifference)) {\n            clearInterval(timerId);\n\n            alert(massages);\n      \n            return;\n        }\n\n        refs.startBtn.setAttribute('disabled', true);\n        \n        convertMs(timeDifference);\n        \n    }, 1000);\n}\n\nfunction onTimerStop() {\n    clearInterval(timerId);\n    refs.startBtn.removeAttribute('disabled')\n}\n\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = addLeadingZero(Math.floor((ms % day) / hour));\n  // Remaining minutes\n  const minutes = addLeadingZero(Math.floor(((ms % day) % hour) / minute));\n  // Remaining seconds\n  const seconds = addLeadingZero(Math.floor((((ms % day) % hour) % minute) / second));\n\n  appdateTimer(days, hours, minutes, seconds);\n}\n\n\n\nfunction addLeadingZero(value) {\n    return String(value).padStart(2, \"0\");\n}\n\nfunction appdateTimer(days, hours, minutes, seconds) {\n    refs.spanDay.textContent = days;\n    refs.spanHour.textContent = hours;\n    refs.spanMin.textContent = minutes;\n    refs.spanSec.textContent = seconds;\n}\n\n"]}